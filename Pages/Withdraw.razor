@page "/withdraw"
@inject PlayerState PlayerState
@inject IJSRuntime JS
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-6">
            <div class="card shadow-lg">
                <div class="card-body">
                    <h4 class="card-title text-center mb-4">WITHDRAW</h4>

                    <!-- BALANCE -->
                    <div class="d-flex align-items-center justify-content-between bg-light rounded p-3 mb-4">
                        <div>
                            <div class="small text-muted">TOTAL BALANCE AVAILABLE</div>
                            <div class="fw-bold">@totalBalance.ToString("0.00") LUDC</div>
                        </div>
                        <img src="solicon.webp" alt="Sol Icon" style="width:32px;height:32px;" />
                    </div>

                    <EditForm Model="@withdrawModel" OnValidSubmit="HandleWithdraw">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="gateway" class="form-label">Payment Gateway</label>
                            <InputSelect id="gateway" class="form-control" @bind-Value="withdrawModel.Gateway" @onchange="GatewayChanged">
                                @foreach (var gateway in gatewayOptions)
                                {
                                    <option value="@gateway">@gateway</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => withdrawModel.Gateway)" />
                        </div>

                        @if (!string.IsNullOrEmpty(withdrawModel.Gateway))
                        {
                            @if (withdrawModel.Gateway == "SOLANA" || withdrawModel.Gateway == "USDC")
                            {
                                <div class="mb-3">
                                    <label for="address" class="form-label">@withdrawModel.Gateway Address</label>
                                    <InputText id="address" class="form-control" @bind-Value="withdrawModel.Address" />
                                    <ValidationMessage For="@(() => withdrawModel.Address)" />
                                    <div class="small text-muted mb-2">
                                        Enter your Solana wallet address (32–44 chars, Base58).
                                    </div>
                                </div>
                            }
                            else if (withdrawModel.Gateway == "JazzCash" || withdrawModel.Gateway == "EasyPaisa" || withdrawModel.Gateway == "Paytm")
                            {
                                <div class="mb-3">
                                    <label for="mobile" class="form-label">@withdrawModel.Gateway Mobile Number</label>
                                    <InputText id="mobile" class="form-control" @bind-Value="withdrawModel.Address" />
                                    <ValidationMessage For="@(() => withdrawModel.Address)" />
                                </div>
                            }

                            <div class="mb-3">
                                <label for="amount" class="form-label">@withdrawModel.Gateway Amount (LUDC)</label>
                                <InputNumber id="amount" class="form-control" @bind-Value="withdrawModel.Amount" />
                                <ValidationMessage For="@(() => withdrawModel.Amount)" />
                            </div>

                            <div class="mb-2 small text-muted">
                                @GetReverseConversion()
                            </div>
                        }

                        <div class="d-flex justify-content-between">
                            @if (withdrawModel.Gateway == "SOLANA" || withdrawModel.Gateway == "USDC")
                            {
                                <button type="button" class="btn btn-secondary me-2" @onclick="PasteAddressAsync">PASTE ADDRESS</button>
                            }
                            <button type="submit" class="btn btn-warning" disabled="@(!CanWithdraw)">SEND</button>
                        </div>
                    </EditForm>

                    @if (successMessage != null)
                    {
                        <div class="alert alert-success mt-3">@successMessage</div>
                    }
                    @if (copySuccess)
                    {
                        <div class="text-success text-center mt-2">Address pasted!</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- OTP MODAL -->
@if (showOtpModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Withdraw Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="CloseOtpModal"></button>
                </div>
                <div class="modal-body">
                    @if (withdrawModel.Gateway == "JazzCash" || withdrawModel.Gateway == "EasyPaisa" || withdrawModel.Gateway == "Paytm")
                    {
                        <EditForm Model="@otpModel" OnValidSubmit="HandleOtpSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (string.IsNullOrWhiteSpace(UserPhone) || UserPhone == "###########")
                            {
                                <div class="mb-3">
                                    <label for="number" class="form-label">Enter your mobile number</label>
                                    <InputText id="number" class="form-control" @bind-Value="otpModel.Number" maxlength="15" />
                                    <ValidationMessage For="@(() => otpModel.Number)" />
                                </div>
                                <button type="button" class="btn btn-secondary mb-2 w-100" @onclick="SendOtpToNumber" disabled="@otpSent">Send OTP</button>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label class="form-label">OTP will be sent to:</label>
                                    <div class="fw-bold mb-2">@UserPhone</div>
                                    <button type="button" class="btn btn-secondary mb-2 w-100" @onclick="SendOtpToNumber" disabled="@otpSent">Send OTP</button>
                                </div>
                            }

                            @if (otpSent)
                            {
                                <div class="mb-3">
                                    <label for="otp" class="form-label">Enter OTP</label>
                                    <InputText id="otp" class="form-control" @bind-Value="otpModel.Otp" maxlength="6" />
                                    <ValidationMessage For="@(() => otpModel.Otp)" />
                                </div>
                                @if (!string.IsNullOrEmpty(otpError))
                                {
                                    <div class="alert alert-danger py-1">@otpError</div>
                                }
                                <button type="submit" class="btn btn-primary w-100">Confirm Withdrawal</button>
                            }
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="@otpModel" OnValidSubmit="HandleOtpSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="otp" class="form-label">Enter the OTP sent to your email/phone</label>
                                <InputText id="otp" class="form-control" @bind-Value="otpModel.Otp" maxlength="6" />
                                <ValidationMessage For="@(() => otpModel.Otp)" />
                            </div>
                            @if (!string.IsNullOrEmpty(otpError))
                            {
                                <div class="alert alert-danger py-1">@otpError</div>
                            }
                            <button type="submit" class="btn btn-primary w-100">Confirm Withdrawal</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private decimal totalBalance = 0.0m;
    private WithdrawModel withdrawModel = new() { Gateway = "SOLANA" }; // Default to SOLANA
    private string? successMessage;
    private bool copySuccess;
    private bool showOtpModal = false;

    private OtpModel otpModel = new();
    private string? otpError;
    private bool otpSent = false;

    private List<string> gatewayOptions = new()
    {
        "SOLANA", "USDC", "JazzCash", "EasyPaisa", "Paytm"
    };

    // Dynamic rates
    private decimal UsdcToPkrRate = 285m;
    private decimal UsdcToInrRate = 83m;
    private decimal SolToUsdRate = 140m;
    private const decimal LudcToUsdcRate = 1000m;

    protected override async Task OnInitializedAsync()
    {
        totalBalance = PlayerState.Player?.Wallet?.AvailableBalance ?? 0.0m;
        try
        {
            withdrawModel.Address = await JS.InvokeAsync<string>("walletInterop.connectPhantom");
        }
        catch
        {
        }

        await FetchRates();
    }

    private async Task FetchRates()
    {
        try
        {
            var usdcResp = await Http.GetAsync("https://api.coingecko.com/api/v3/simple/price?ids=usd-coin&vs_currencies=pkr,inr");
            var usdcJson = await usdcResp.Content.ReadAsStringAsync();
            var matchPkr = System.Text.RegularExpressions.Regex.Match(usdcJson, @"pkr"":([\d.]+)");
            var matchInr = System.Text.RegularExpressions.Regex.Match(usdcJson, @"inr"":([\d.]+)");
            if (matchPkr.Success) UsdcToPkrRate = decimal.Parse(matchPkr.Groups[1].Value);
            if (matchInr.Success) UsdcToInrRate = decimal.Parse(matchInr.Groups[1].Value);

            var solResp = await Http.GetAsync("https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd");
            var solJson = await solResp.Content.ReadAsStringAsync();
            var matchSol = System.Text.RegularExpressions.Regex.Match(solJson, @"usd"":([\d.]+)");
            if (matchSol.Success) SolToUsdRate = decimal.Parse(matchSol.Groups[1].Value);
        }
        catch
        {
            UsdcToPkrRate = 285m;
            UsdcToInrRate = 83m;
            SolToUsdRate = 140m;
        }
        StateHasChanged();
    }

    private string UserPhone => PlayerState.Player?.PhoneNumber ?? "";

    public class WithdrawModel : IValidatableObject
    {
        [Required(ErrorMessage = "Amount is required.")]
        [Range(0.0001, double.MaxValue, ErrorMessage = "Amount must be positive.")]
        public decimal Amount { get; set; }

        [Required(ErrorMessage = "Address is required.")]
        public string? Address { get; set; }

        [Required(ErrorMessage = "Please select a gateway.")]
        public string? Gateway { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if ((Gateway == "SOLANA" || Gateway == "USDC") && !string.IsNullOrWhiteSpace(Address))
            {
                if (!IsValidSolanaAddress(Address))
                    yield return new ValidationResult("Invalid Solana address.", new[] { nameof(Address) });
            }
        }

        private static bool IsValidSolanaAddress(string address)
        {
            // Solana address: base58, 32-44 chars, no 0/O/I/l
            if (string.IsNullOrWhiteSpace(address)) return false;
            if (address.Length < 32 || address.Length > 44) return false;
            const string base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
            return address.All(c => base58.Contains(c));
        }
    }

    public class OtpModel
    {
        [StringLength(15, ErrorMessage = "Invalid number.")]
        public string? Number { get; set; }

        [Required(ErrorMessage = "OTP is required.")]
        [StringLength(6, ErrorMessage = "OTP must be 6 digits.")]
        public string? Otp { get; set; }
    }

    private async Task PasteAddressAsync()
    {
        try
        {
            var text = await JS.InvokeAsync<string>("navigator.clipboard.readText");
            if (!string.IsNullOrEmpty(text))
            {
                withdrawModel.Address = text;
                copySuccess = true;
                StateHasChanged();
                await Task.Delay(1000);
                copySuccess = false;
                StateHasChanged();
            }
        }
        catch
        {
            // Clipboard permission denied or not available
        }
    }

    // Conversion logic
    private decimal LUDCAmount => withdrawModel.Amount;
    private decimal UsdcAmount => LUDCAmount / LudcToUsdcRate;
    private decimal SolAmount => SolToUsdRate > 0 ? UsdcAmount / SolToUsdRate : 0;
    private decimal PkrAmount => UsdcAmount * UsdcToPkrRate;
    private decimal InrAmount => UsdcAmount * UsdcToInrRate;

    private string GetReverseConversion()
    {
        if (withdrawModel.Amount <= 0) return string.Empty;
        return withdrawModel.Gateway switch
        {
            "SOLANA" => $"{LUDCAmount} LUDC = {SolAmount:0.####} SOL (1 SOL = {SolToUsdRate} USDC)",
            "USDC" => $"{LUDCAmount} LUDC = {UsdcAmount:0.####} USDC",
            "JazzCash" or "EasyPaisa" => $"{LUDCAmount} LUDC = {PkrAmount:0.##} PKR (1 USDC ≈ {UsdcToPkrRate} PKR)",
            "Paytm" => $"{LUDCAmount} LUDC = {InrAmount:0.##} INR (1 USDC ≈ {UsdcToInrRate} INR)",
            _ => ""
        };
    }

    private void GatewayChanged(ChangeEventArgs e)
    {
        withdrawModel.Gateway = e.Value?.ToString();
        withdrawModel.Amount = 0;
        withdrawModel.Address = "";
        successMessage = null;
    }

    private bool CanWithdraw => withdrawModel.Amount > 0 && withdrawModel.Amount <= totalBalance;

    private async Task HandleWithdraw()
    {
        otpError = null;
        otpSent = false;

        // If user has a phone number in their profile, use it, else ask for input in modal
        if ((withdrawModel.Gateway == "JazzCash" || withdrawModel.Gateway == "EasyPaisa" || withdrawModel.Gateway == "Paytm") &&
            (!string.IsNullOrWhiteSpace(UserPhone) && UserPhone != "###########"))
        {
            otpModel = new OtpModel { Number = UserPhone };
        }
        else
        {
            otpModel = new OtpModel();
        }

        showOtpModal = true;
        StateHasChanged();
    }

    private async Task SendOtpToNumber()
    {
        string numberToSend = (!string.IsNullOrWhiteSpace(UserPhone) && UserPhone != "###########")
            ? UserPhone
            : otpModel.Number;

        if (string.IsNullOrWhiteSpace(numberToSend))
        {
            otpError = "Please enter a valid phone number first.";
            return;
        }

        var sent = await SendOtpRequestAsync(withdrawModel, numberToSend);
        if (sent)
        {
            otpSent = true;
            otpError = null;
        }
        else
        {
            otpError = "Failed to send OTP. Please try again.";
        }
    }

    private async Task HandleOtpSubmit()
    {
        var confirmed = await ConfirmOtpAsync(withdrawModel, otpModel.Otp);

        if (confirmed)
        {
            showOtpModal = false;
            successMessage = $"Withdrawal of {withdrawModel.Amount} via {withdrawModel.Gateway} submitted!";
            withdrawModel = new WithdrawModel() { Gateway = "SOLANA" };
            otpSent = false;
            otpModel = new OtpModel();
        }
        else
        {
            otpError = "Invalid OTP. Please try again.";
        }
    }

    private void CloseOtpModal()
    {
        showOtpModal = false;
        otpSent = false;
    }

    private async Task<bool> SendOtpRequestAsync(WithdrawModel model, string? number = null)
    {
        await Task.Delay(500); // Simulate API call
        return true;
    }

    private async Task<bool> ConfirmOtpAsync(WithdrawModel model, string? otp)
    {
        await Task.Delay(500); // Simulate API call
        return otp == "123456"; // Accept only 123456 as demo OTP
    }
}
