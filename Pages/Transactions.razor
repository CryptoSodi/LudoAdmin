@page "/transactions"
@inject PlayerState PlayerState

<h3>Transactions</h3>

@if (PagedTransactions == null || PagedTransactions.Count == 0)
{
    <div>No transactions yet.</div>
}
else
{
    <div class="mb-2 d-flex justify-content-between align-items-center">
        <span>Showing @startIndex - @endIndex of @totalTransactions transactions</span>
        <div>
            <button class="btn btn-sm btn-outline-secondary me-1" @onclick="PrevPage" disabled="@isFirstPage">Previous</button>
            <span class="fw-semibold">Page @currentPage of @totalPages</span>
            <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="NextPage" disabled="@isLastPage">Next</button>
        </div>
    </div>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Transaction Id</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tx in PagedTransactions)
            {
                Console.WriteLine("______________________>" + tx.Description);
                <tr>
                    <td>@tx.TransactionId</td>
                    
                    <td>
                        @switch (tx.Description)
                        {
                            case "On-chain sweep":
                                <span class="text-success fw-semibold">
                                    <i class="bi bi-cash-coin me-1"></i>Deposit
                                </span>
                                break;

                            case "Withdrawal":
                                <span class="text-danger fw-semibold">
                                    <i class="bi bi-coin me-1"></i>Withdrawal
                                </span>
                                break;

                            case "GameWin":
                                <span class="text-success fw-semibold">
                                    <i class="bi bi-trophy-fill me-1"></i>Game Win
                                </span>
                                break;

                            case "GameLoss":
                                <span class="text-danger fw-semibold">
                                    <i class="bi bi-x-circle-fill me-1"></i>Game Loss
                                </span>
                                break;

                            case "Game Fee":
                                <span class="text-secondary fw-semibold">
                                    <i class="bi bi-controller me-1"></i>Game Fee
                                </span>
                                break;

                            case "Game Refund":
                                <span class="text-info fw-semibold">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Game Refund
                                </span>
                                break;

                            case "Daily Bonus":
                                <span class="text-warning fw-semibold">
                                    <i class="bi bi-gift me-1"></i>Daily Bonus
                                </span>
                                break;

                            default:
                                <span class="text-muted">@tx.Description</span>
                                break;
                        }


                    </td>
                    <td>@tx.Amount.ToString() Ludc</td>
                    <td>@tx.CreatedDate.ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int currentPage = 1;
    private int pageSize = 30;
    private int totalTransactions => PlayerState.Player?.Wallet?.Transactions?.Count ?? 0;
    private int totalPages => (int)Math.Ceiling((double)totalTransactions / pageSize);

    private List<SharedCode.Constants.WalletTransaction> PagedTransactions = new();

    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage == totalPages;

    private int startIndex => ((currentPage - 1) * pageSize) + 1;
    private int endIndex => Math.Min(currentPage * pageSize, totalTransactions);

    protected override void OnInitialized()
    {
        LoadPage();
    }

    private void LoadPage()
    {
        if (PlayerState.Player?.Wallet?.Transactions != null)
        {
            PagedTransactions = PlayerState.Player.Wallet.Transactions
                .OrderByDescending(t => t.CreatedDate)
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
    }

    private void NextPage()
    {
        if (!isLastPage)
        {
            currentPage++;
            LoadPage();
        }
    }

    private void PrevPage()
    {
        if (!isFirstPage)
        {
            currentPage--;
            LoadPage();
        }
    }
}
