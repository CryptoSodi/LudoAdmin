@page "/games"
@inject PlayerState PlayerState
@using SharedCode.Constants
@inject LudoAdmin.Service.HubService Hub
@inject LudoAdmin.Service.AuthService Auth

<h3>Game History</h3>

@if (games == null)
{
    <p>Loading games...</p>
}
else if (games.Count == 0)
{
    <p>No games played yet.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Game Type</th>
                <th>Room Code</th>
                <th>State</th>
                <th>Bet Amount</th>
                <th>Win State</th>                
                <th>Is Private</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr>
                    <td>@game.GameId</td>
                    <td>
                        @if (game.GameType == "2")
                        {
                            @:1vs1
                        }
                        else if (game.GameType == "3")
                        {
                            @:1vs2
                            
                        }else if (game.GameType == "4")
                        {
                            @:1vs3
                        }
                        else if (game.GameType == "22")
                        {
                            @:2vs2
                        }
                        else
                        {
                            @:Unknown
                        }
                    </td>
                    <td>@game.RoomCode</td>
                    <td>@game.State</td>
                    <td>@game.BetAmount</td>
                    <td>
                        @if (game.Winner1 == PlayerState.Player.PlayerId || game.Winner2 == PlayerState.Player.PlayerId)
                        {
                            @if (game.GameType == "2" || game.GameType == "22")
                            {
                                @:Won @(game.BetAmount * 2)
                            }
                            else if (game.GameType == "3")
                            {
                                @:Won @(game.BetAmount * 3)

                            }
                            else if (game.GameType == "4")
                            {
                                @:Won @(game.BetAmount * 4)
                            }
                            else
                            {
                                @:Unknown
                            }
                        }
                        else
                        {
                            
                                @:Lost @(game.BetAmount)
                        }
                    </td>
                    <td>@game.IsPrivate</td>
                    <td>@game.CreatedDate.ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<LudoClient.Models.Game>? games;
    private PlayerInfo playerInfo;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            bool isPrivate = false;
            games = await Hub.GetGame(PlayerState.Player.AuthToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching games: {ex.Message}");
            games = new(); // fallback to empty list on error
        }
    }
}