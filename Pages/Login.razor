@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IDisposable
@inject LudoAdmin.Service.AuthService Auth

@page "/Login"
<div style="
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: url('background.webp') center center no-repeat;
    background-size: cover;
    background-attachment: fixed;
    z-index: 10000;
">
    <img src="logo.png" alt="Logo" style="width: 450px; margin-bottom: 40px;" />

    <button @onclick="LoginWithGoogle" style="padding: 0; border: none; background: none; cursor: pointer;">
        <img src="google_login.webp" alt="Login with Google" style="width:220px; height:auto; display: block;" />
    </button>
</div>
@code {
    private DotNetObjectReference<Login>? objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }
    // Replace these with your actual values from Google Developer Console
    private string clientId = "973406093603-dlm3o6jrkuf6b1m1lc7m8hir9qc4cul5.apps.googleusercontent.com";//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
    private string redirectUri => Navigation.BaseUri + "auth-callback"; // We will create this page next

    private async Task LoginWithGoogle()
    {
        var url =
            $"https://accounts.google.com/o/oauth2/v2/auth" +
            $"?client_id={clientId}" +
            $"&redirect_uri={Uri.EscapeDataString(redirectUri)}" +
            $"&response_type=token" +
            $"&scope=openid%20email%20profile" +
            $"&prompt=select_account";

        // Expose the .NET callback object for JS to use
        await JS.InvokeVoidAsync("window.registerGoogleAuthCallback", objRef);
        await JS.InvokeVoidAsync("openGoogleLoginPopup", url);
    }
    [JSInvokable]
    public async Task OnGoogleAuthSuccess(string token)
    {
        // Optionally store token, authenticate, etc.
         await Auth.SetAccessTokenAsync(token);
        // await Hub.SendUserLoggedInEvent(token);

        // Redirect to home or wherever you want
        Navigation.NavigateTo("/", true);
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }
}
@* Note: Make sure to replace YOUR_GOOGLE_CLIENT_ID with your actual Google Client ID. *@