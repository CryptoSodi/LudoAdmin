@page "/support"
@inject PlayerState PlayerState
@using System.ComponentModel.DataAnnotations

<body class="bg-gray-950 text-white font-sans scroll-smooth">
    <section class="pt-16 pb-10 bg-gray-900" style="background-image:url('img/header-shape-lobelia.png');">
        <!-- Header -->
        <div class="container mx-auto px-4 max-w-3xl text-center">
            <h3 class="text-3xl md:text-4xl font-extrabold mb-4 tracking-tight">
                <span class="whitespace-nowrap">
                    <span style="-webkit-text-stroke:1px black; color:#EB1026;">S</span>
                    <span style="-webkit-text-stroke:1px black; color:#00B15A;">U</span>
                    <span style="-webkit-text-stroke:1px black; color:#FDAF00;">P</span>
                    <span style="-webkit-text-stroke:1px black; color:#00B4E1;">P</span>
                    <span style="-webkit-text-stroke:1px black; color:#EB1026;">O</span>
                    <span style="-webkit-text-stroke:1px black; color:#00B15A;">R</span>
                    <span style="-webkit-text-stroke:1px black; color:#FDAF00;">T</span>
                </span>
            </h3>
            <div class="mx-auto mb-6 h-1 w-32 rounded"
                 style="background:linear-gradient(90deg,#EB1026 0 25%,#00B15A 25% 50%,#FDAF00 50% 75%,#00B4E1 75% 100%);"></div>
            <p class="text-gray-300 text-sm md:text-base">
                Create and track help tickets. (All data below is placeholder and in-memory.)
            </p>
        </div>

        <div class="container mx-auto px-4 max-w-7xl mt-10">
            @if (_loading)
            {
                <div class="text-center py-20 text-gray-400">Loading support data...</div>
            }
            else
            {
                <!-- Summary Tiles -->
                <div class="grid gap-6 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-6 mb-10">
                    <div class="bg-gray-800 p-5 rounded shadow hover:shadow-xl transition">
                        <h4 class="text-xs font-semibold tracking-wide text-gray-400 uppercase">Total Tickets</h4>
                        <div class="text-3xl font-bold mt-2" style="color:#EB1026;">@_tickets.Count</div>
                    </div>
                    <div class="bg-gray-800 p-5 rounded shadow hover:shadow-xl transition">
                        <h4 class="text-xs font-semibold tracking-wide text-gray-400 uppercase">Open</h4>
                        <div class="text-3xl font-bold mt-2" style="color:#00B15A;">@_tickets.Count(t => t.Status == "Open")</div>
                    </div>
                    <div class="bg-gray-800 p-5 rounded shadow hover:shadow-xl transition">
                        <h4 class="text-xs font-semibold tracking-wide text-gray-400 uppercase">Pending</h4>
                        <div class="text-3xl font-bold mt-2 text-yellow-300">@_tickets.Count(t => t.Status == "Pending")</div>
                    </div>
                    <div class="bg-gray-800 p-5 rounded shadow hover:shadow-xl transition">
                        <h4 class="text-xs font-semibold tracking-wide text-gray-400 uppercase">Resolved</h4>
                        <div class="text-3xl font-bold mt-2 text-blue-300">@_tickets.Count(t => t.Status == "Resolved")</div>
                    </div>
                    <div class="bg-gray-800 p-5 rounded shadow hover:shadow-xl transition">
                        <h4 class="text-xs font-semibold tracking-wide text-gray-400 uppercase">Avg Resp (m)</h4>
                        <div class="text-2xl font-bold mt-2 text-purple-300">42</div>
                        <div class="text-[10px] text-gray-500 mt-1">Placeholder</div>
                    </div>
                    <div class="bg-gray-800 p-5 rounded shadow hover:shadow-xl transition">
                        <h4 class="text-xs font-semibold tracking-wide text-gray-400 uppercase">Your Open</h4>
                        <div class="text-3xl font-bold mt-2 text-green-400">
                            @_tickets.Count(t => t.Status != "Resolved" && t.PlayerId == _playerId)
                        </div>
                    </div>
                </div>

                <!-- New Ticket + List Layout -->
                <div class="grid lg:grid-cols-3 gap-8">
                    <!-- Create Ticket -->
                    <div class="lg:col-span-1">
                        <div class="bg-gray-800 rounded shadow p-6">
                            <h4 class="text-lg font-semibold mb-4" style="color:#EB1026;">New Ticket</h4>
                            <EditForm Model="@_newTicket" OnValidSubmit="@CreateTicket">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-red-400 text-xs mb-3" />

                                <div class="mb-4">
                                    <label class="block text-xs font-semibold tracking-wide text-gray-300 uppercase mb-2">
                                        Category
                                    </label>
                                    <InputSelect @bind-Value="_newTicket.Category"
                                                 class="w-full bg-gray-700 text-white text-sm rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#00B4E1]/60">
                                        <option value="">-- Select --</option>
                                        @foreach (var c in _categories)
                                        {
                                            <option value="@c">@c</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => _newTicket.Category)" class="text-red-400 text-xs mt-1" />
                                </div>

                                <div class="mb-4">
                                    <label class="block text-xs font-semibold tracking-wide text-gray-300 uppercase mb-2">
                                        Subject
                                    </label>
                                    <InputText @bind-Value="_newTicket.Subject"
                                               class="w-full bg-gray-700 text-white text-sm rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#EB1026]/60" />
                                    <ValidationMessage For="@(() => _newTicket.Subject)" class="text-red-400 text-xs mt-1" />
                                </div>

                                <div class="mb-4">
                                    <label class="block text-xs font-semibold tracking-wide text-gray-300 uppercase mb-2">
                                        Priority
                                    </label>
                                    <InputSelect @bind-Value="_newTicket.Priority"
                                                 class="w-full bg-gray-700 text-white text-sm rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#FDAF00]/60">
                                        @foreach (var p in _priorities)
                                        {
                                            <option value="@p">@p</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="mb-6">
                                    <label class="block text-xs font-semibold tracking-wide text-gray-300 uppercase mb-2">
                                        Description
                                    </label>
                                    <InputTextArea @bind-Value="_newTicket.Description"
                                                   class="w-full min-h-[120px] bg-gray-700 text-white text-sm rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#00B15A]/60" />
                                    <ValidationMessage For="@(() => _newTicket.Description)" class="text-red-400 text-xs mt-1" />
                                </div>

                                <button type="submit"
                                        class="w-full bg-gradient-to-r from-[#EB1026] via-[#FDAF00] to-[#00B4E1] text-black font-semibold text-sm rounded px-5 py-3 hover:opacity-90 transition">
                                    Submit Ticket
                                </button>

                                @if (!string.IsNullOrEmpty(_createMessage))
                                {
                                    <div class="mt-4 text-xs text-green-400 font-semibold">@_createMessage</div>
                                }
                            </EditForm>
                        </div>
                    </div>

                    <!-- Ticket List -->
                    <div class="lg:col-span-2">
                        <div class="bg-gray-800 rounded shadow p-6">
                            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-4">
                                <h4 class="text-lg font-semibold" style="color:#00B4E1;">Tickets</h4>
                                <div class="flex flex-wrap gap-2 text-xs">
                                    <button type="button"
                                            class="px-3 py-1.5 rounded border border-gray-600 hover:bg-gray-700 transition @(string.IsNullOrEmpty(_statusFilter) ? "bg-gray-700" : "")"
                                            @onclick="() => SetStatusFilter(null)">
                                        All
                                    </button>
                                    @foreach (var s in _statusOptions)
                                    {
                                        <button type="button"
                                                class="px-3 py-1.5 rounded border border-gray-600 hover:bg-gray-700 transition @(_statusFilter == s ? "bg-gray-700" : "")"
                                                @onclick="() => SetStatusFilter(s)">
                                            @s
                                        </button>
                                    }
                                </div>
                            </div>

                            <div class="overflow-x-auto rounded border border-gray-700">
                                <table class="min-w-full text-sm">
                                    <thead class="bg-gray-700 text-gray-200 uppercase text-xs tracking-wide">
                                        <tr>
                                            <th class="px-4 py-2 text-left">ID</th>
                                            <th class="px-4 py-2 text-left">Subject</th>
                                            <th class="px-4 py-2 text-left">Category</th>
                                            <th class="px-4 py-2 text-left">Priority</th>
                                            <th class="px-4 py-2 text-left">Status</th>
                                            <th class="px-4 py-2 text-left">Updated</th>
                                            <th class="px-4 py-2 text-left">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var t in FilteredTickets().OrderByDescending(t => t.LastUpdated))
                                        {
                                            <tr class="odd:bg-gray-800 even:bg-gray-850 hover:bg-gray-700/60 transition">
                                                <td class="px-4 py-2 font-mono text-xs">@t.Id</td>
                                                <td class="px-4 py-2">
                                                    <div class="font-semibold text-white truncate max-w-[200px]">@t.Subject</div>
                                                    <div class="text-[10px] text-gray-400">@t.CreatedDate.ToString("yyyy-MM-dd")</div>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <span class="px-2 py-0.5 rounded text-xs bg-blue-600/30 text-blue-300">@t.Category</span>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <span class="px-2 py-0.5 rounded text-xs @PriorityBadge(t.Priority)">
                                                        @t.Priority
                                                    </span>
                                                </td>
                                                <td class="px-4 py-2">
                                                    <span class="px-2 py-0.5 rounded text-xs font-semibold @StatusBadge(t.Status)">
                                                        @t.Status
                                                    </span>
                                                </td>
                                                <td class="px-4 py-2 text-xs">
                                                    @t.LastUpdated.ToString("yyyy-MM-dd HH:mm")
                                                </td>
                                                <td class="px-4 py-2 text-xs">
                                                    <button class="px-2 py-1 rounded bg-gray-700 hover:bg-gray-600 transition"
                                                            @onclick="() => ToggleExpand(t)">
                                                        @(t.Expanded ? "Hide" : "View")
                                                    </button>
                                                </td>
                                            </tr>
                                            @if (t.Expanded)
                                            {
                                                <tr class="bg-gray-900/60">
                                                    <td colspan="7" class="px-6 pb-6 pt-2">
                                                        <div class="grid md:grid-cols-3 gap-4 text-xs">
                                                            <div>
                                                                <h5 class="font-semibold text-gray-300 mb-1">Summary</h5>
                                                                <p class="text-gray-400 leading-snug">@t.Description</p>
                                                            </div>
                                                            <div>
                                                                <h5 class="font-semibold text-gray-300 mb-1">Meta</h5>
                                                                <ul class="space-y-1 text-gray-400">
                                                                    <li><span class="text-gray-500">Messages:</span> @t.Messages</li>
                                                                    <li><span class="text-gray-500">Created:</span> @t.CreatedDate.ToString("g")</li>
                                                                    <li><span class="text-gray-500">Updated:</span> @t.LastUpdated.ToString("g")</li>
                                                                </ul>
                                                            </div>
                                                            <div>
                                                                <h5 class="font-semibold text-gray-300 mb-1">Actions</h5>
                                                                <div class="flex flex-wrap gap-2">
                                                                    @if (t.Status != "Resolved")
                                                                    {
                                                                        <button class="px-3 py-1.5 rounded text-[11px] font-semibold bg-gradient-to-r from-[#00B15A] to-[#00B4E1] text-black hover:opacity-90 transition"
                                                                                @onclick="() => MarkResolved(t)">
                                                                            Mark Resolved
                                                                        </button>
                                                                    }
                                                                    <button class="px-3 py-1.5 rounded text-[11px] font-semibold bg-gradient-to-r from-[#FDAF00] to-[#EB1026] text-black hover:opacity-90 transition"
                                                                            @onclick="() => SimulateReply(t)">
                                                                        Simulate Reply
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        @if (!FilteredTickets().Any())
                                        {
                                            <tr>
                                                <td colspan="7" class="px-4 py-6 text-center text-gray-400 text-xs">
                                                    No tickets match the current filter.
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <p class="text-xs text-gray-500 mt-3">
                                NOTE: Support system is local-only. Replace seed + actions with real API integration.
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>

    <footer class="bg-gray-900 text-center text-xs text-gray-400 py-6 mt-10">
        &copy; 2025 Ludo Cities Support
    </footer>
</body>

@code {
    private bool _loading = true;
    private int _playerId;
    private readonly List<Ticket> _tickets = new();
    private string? _statusFilter;

    // Form model
    private readonly NewTicketModel _newTicket = new()
    {
        Priority = "Normal"
    };
    private string? _createMessage;

    private readonly string[] _categories = new[]
    {
        "Account", "Gameplay", "Payments", "Bugs", "NFT", "Other"
    };
    private readonly string[] _priorities = new[] { "Low", "Normal", "High", "Critical" };
    private readonly string[] _statusOptions = new[] { "Open", "Pending", "Resolved" };

    protected override Task OnInitializedAsync()
    {
        _playerId = PlayerState.Player?.PlayerId ?? 1001;
        SeedTickets();
        _loading = false;
        return Task.CompletedTask;
    }

    private void SeedTickets()
    {
        var now = DateTime.UtcNow;
        _tickets.AddRange(new[]
        {
            new Ticket(101,"Cannot withdraw","Payments","Open","High",
                "Trying to withdraw but transaction fails with generic error.",_playerId,now.AddHours(-5),now.AddHours(-1),3),
            new Ticket(102,"Match stuck on loading","Gameplay","Pending","Normal",
                "Game room froze after player disconnect.",_playerId+1,now.AddHours(-10),now.AddHours(-2),4),
            new Ticket(103,"Balance mismatch","Account","Resolved","High",
                "My LUDC balance dropped after reconnect.",_playerId,now.AddDays(-1),now.AddHours(-6),5),
            new Ticket(104,"NFT not showing","NFT","Open","Low",
                "Purchased NFT not in inventory view.",_playerId+2,now.AddHours(-8),now.AddMinutes(-90),2),
            new Ticket(105,"UI overlap on mobile","Bugs","Open","Normal",
                "Header overlaps buttons on small screens.",_playerId,now.AddHours(-3),now.AddMinutes(-40),1)
        });
    }

    private IEnumerable<Ticket> FilteredTickets()
        => string.IsNullOrEmpty(_statusFilter)
            ? _tickets
            : _tickets.Where(t => t.Status == _statusFilter);

    private void SetStatusFilter(string? status)
    {
        _statusFilter = status;
    }

    private void ToggleExpand(Ticket t)
    {
        t.Expanded = !t.Expanded;
    }

    private void MarkResolved(Ticket t)
    {
        t.Status = "Resolved";
        t.LastUpdated = DateTime.UtcNow;
    }

    private void SimulateReply(Ticket t)
    {
        t.Messages += 1;
        if (t.Status == "Open")
            t.Status = "Pending";
        t.LastUpdated = DateTime.UtcNow;
    }

    private void CreateTicket()
    {
        if (string.IsNullOrWhiteSpace(_newTicket.Subject) ||
            string.IsNullOrWhiteSpace(_newTicket.Category) ||
            string.IsNullOrWhiteSpace(_newTicket.Description))
        {
            return;
        }

        var id = (_tickets.Count == 0 ? 200 : _tickets.Max(t => t.Id) + 1);
        var now = DateTime.UtcNow;
        _tickets.Add(new Ticket(
            id,
            _newTicket.Subject.Trim(),
            _newTicket.Category,
            "Open",
            _newTicket.Priority,
            _newTicket.Description.Trim(),
            _playerId,
            now,
            now,
            1));

        _createMessage = $"Ticket #{id} created.";
        _newTicket.Subject = "";
        _newTicket.Description = "";
        _newTicket.Category = "";
        _newTicket.Priority = "Normal";
    }

    private string StatusBadge(string status) => status switch
    {
        "Open" => "bg-green-600/30 text-green-300",
        "Pending" => "bg-yellow-600/30 text-yellow-300",
        "Resolved" => "bg-blue-600/30 text-blue-300",
        _ => "bg-gray-600/30 text-gray-300"
    };

    private string PriorityBadge(string prio) => prio switch
    {
        "Low" => "bg-gray-600/40 text-gray-300",
        "Normal" => "bg-indigo-600/30 text-indigo-300",
        "High" => "bg-orange-600/30 text-orange-300",
        "Critical" => "bg-red-600/30 text-red-300",
        _ => "bg-gray-600/30 text-gray-300"
    };

    private sealed record Ticket(
        int Id,
        string Subject,
        string Category,
        string Status,
        string Priority,
        string Description,
        int PlayerId,
        DateTime CreatedDate,
        DateTime LastUpdated,
        int Messages)
    {
        public bool Expanded { get; set; }
        public string Status { get; set; } = Status;
        public string Priority { get; set; } = Priority;
        public DateTime LastUpdated { get; set; } = LastUpdated;
        public int Messages { get; set; } = Messages;
    }

    private sealed class NewTicketModel
    {
        [Required, StringLength(60)]
        public string? Subject { get; set; }

        [Required]
        public string? Category { get; set; }

        [Required, StringLength(2000)]
        public string? Description { get; set; }

        [Required]
        public string Priority { get; set; } = "Normal";
    }
}