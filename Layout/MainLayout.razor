@inherits LayoutComponentBase
@inject LudoAdmin.Service.AuthService Auth
@inject LudoAdmin.Service.HubService Hub;
@inject NavigationManager Nav
@inject PlayerState PlayerState
@inject IJSRuntime JS
@implements IDisposable

@if (!_isChecked)
{
    <!-- Optional: Add a spinner or loading text -->
    <div style="text-align:center; padding:40px;">
        <h3>Checking authentication...</h3>
    </div>
}
else if (_isLoggedIn)
{
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <div class="top-row px-4">
                    @if (string.IsNullOrEmpty(_phantomWalletAddress))
                    {
                        <button @onclick="ConnectPhantomWallet">Connect Phantom</button>
                    }
                    else
                    {
                        <span style="margin-right: 10px;">Connected: @_phantomWalletAddress</span>
                        <button @onclick="DisconnectPhantomWallet">Disconnect Phantom</button>
                    }
                    <button @onclick="Logout" style="background:none; border:none; color:#4285F4; cursor:pointer; font-size:1em; text-decoration:underline;">Logout</button>
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}
else
{
    <div class="page">        
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}
@code {
    private string _phantomWalletAddress;
    private bool _isChecked = false;
    private bool _isLoggedIn = false;
    private PeriodicTimer? _playerRefreshTimer;
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        // Don't check for login page or callback page
        var currentUri = Nav.ToBaseRelativePath(Nav.Uri).ToLower();
        if (currentUri.StartsWith("login") || currentUri.StartsWith("auth-callback"))
        {
            _isChecked = true;
            _isLoggedIn = false;
            return;
        }

        _isLoggedIn = await Auth.IsLoggedInAsync();
        _isChecked = true;

        if (!_isLoggedIn)
        {
            Nav.NavigateTo("/login", true);
        }
        else
        {
            var player = await Auth.GetPlayerInfoAsync();
            PlayerState.SetPlayer(player);
            _phantomWalletAddress = await JS.InvokeAsync<string>("walletInterop.connectPhantom");

            StartPlayerRefreshTimer(); // 🔁 Start periodic refresh
        }
    }
    private void StartPlayerRefreshTimer()
    {
        _playerRefreshTimer = new PeriodicTimer(TimeSpan.FromSeconds(30)); // Adjust interval as needed 

        _ = Task.Run(async () =>
        {
            while (await _playerRefreshTimer.WaitForNextTickAsync(_cts.Token))
            {
                try
                {
                    var player = await Auth.GetPlayerInfoAsync();
                    var updatedPlayer = await Hub.UserConnectedSetID(player.AuthToken);
                    PlayerState.SetPlayer(updatedPlayer);
                    await Auth.SetPlayerInfoAsync(updatedPlayer);
                    await InvokeAsync(StateHasChanged); // Refresh UI if needed
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error refreshing player info: {ex.Message}");
                }
            }
        });
    }

    private async Task Logout()
    {
        await Auth.RemoveAccessTokenAsync();
        Nav.NavigateTo("/login", true);
    }

    private async Task ConnectPhantomWallet()
    {
        var publicKey = await JS.InvokeAsync<string>("walletInterop.connectPhantom");
        if (!string.IsNullOrEmpty(publicKey))
        {
            _phantomWalletAddress = publicKey;
            Console.WriteLine($"Connected to Phantom: {publicKey}");
        }
    }

    private async Task DisconnectPhantomWallet()
    {
        var success = await JS.InvokeAsync<bool>("walletInterop.disconnectPhantom");
        if (success)
        {
            Console.WriteLine("Phantom wallet disconnected.");
            _phantomWalletAddress = null;
        }
        else
        {
            Console.WriteLine("Phantom wallet failed to disconnect.");
        }
    }

    private async Task ConnectMetaMask()
    {
        var account = await JS.InvokeAsync<string>("walletInterop.connectMetaMask");
        if (!string.IsNullOrEmpty(account))
        {
            Console.WriteLine($"Connected to MetaMask: {account}");
        }
    }

    private async Task SendSol(string toAddress, decimal amountInSol)
    {
        var txSignature = await JS.InvokeAsync<string>("walletInterop.sendSol", toAddress, amountInSol);
        if (!string.IsNullOrEmpty(txSignature))
        {
            Console.WriteLine($"Transaction successful: {txSignature}");
        }
        else
        {
            Console.WriteLine("Transaction failed.");
        }
    }
    public void Dispose()
    {
        _cts.Cancel();
        _playerRefreshTimer?.Dispose();
        _cts.Dispose();
    }
}